/*
//@HEADER
// ************************************************************************
// 
//                        Kokkos v. 2.0
//              Copyright (2014) Sandia Corporation
// 
// Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
// the U.S. Government retains certain rights in this software.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the Corporation nor the names of the
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Questions? Contact  H. Carter Edwards (hcedwar@sandia.gov)
// 
// ************************************************************************
//@HEADER
*/

#ifndef STD_EXPERIMENTAL_ARRAY_REF_HEADER
#define STD_EXPERIMENTAL_ARRAY_REF_HEADER

#include <initializer_list>
#include <algorithm>

#include <iostream>

//--------------------------------------------------------------------------
//--------------------------------------------------------------------------

namespace std {
namespace experimental {

struct all_type { constexpr all_type() noexcept {} };

constexpr all_type all ;

template< typename IntegralType >
struct extent_size_type ;

}} // std::experimental

//--------------------------------------------------------------------------
//--------------------------------------------------------------------------

#include <detail/array_helper>

//--------------------------------------------------------------------------
//--------------------------------------------------------------------------

namespace std {
namespace experimental {

struct layout_right {

template< typename ExtentType , size_t ... Extents >
struct mapping : private detail::extents_impl< 0 , ExtentType , Extents... >
{
public:

  // TYPES

  using size_type  = ExtentType ;
  using extents_t  = detail::extents_impl< 0 , ExtentType , Extents ... > ;

private:

  template< int I , typename iType >
  void get_stride( iType * const s ) const noexcept
    {
      if ( I + 1 < extents_t::rank() ) {
        mapping::template get_stride<(I+1 < extents_t::rank() ? I+1 : I )>(s);
        s[I] = s[I+1] * extents_t::template extent<I>();
      }
      else {
        s[I] = 1 ;
      }
    }

  template< int I >
  constexpr size_type get_stride( int i ) const noexcept
    {
      // Start the product when i < I
      // Multiply to the right until the end.

      return ( i < I ? extents_t::template extent<I>() : 1 ) *
             ( I + 1 < extents_t::rank()
               ? mapping::template get_stride<(I+1<extents_t::rank()?I+1:I)>(i)
               : 1 );
    }

  template< int I >
  constexpr size_type offset( size_type sum ) const noexcept
    { return sum ; }

  template< int I , typename IR , typename ... Arg >
  constexpr size_type
  offset( size_type sum , IR ir , Arg ... arg ) const noexcept
    {
      // Guard extent extraneous zeros in the tail.
      return I ? mapping::template offset<(I?I-1:0)>( ir + extents_t::template extent< extents_t::rank() - I >() * sum , arg... ) : sum ;
    }

public:

  // DOMAIN OBSERVERS

  using extents_t::rank ;
  using extents_t::rank_dynamic ;
  using extents_t::static_extent ;
  using extents_t::extent ;
  using extents_t::size ;

  // CODOMAIN OBSERVERS

  constexpr size_type span() const noexcept
    { return extents_t::size(); }

  // MAPPING OBSERVERS

  static constexpr bool is_always_unique = true ;
  static constexpr bool is_always_regular = true ;
  static constexpr bool is_always_contiguous = true ;

  constexpr bool is_unique() const noexcept
    { return is_always_unique ; }

  constexpr bool is_regular() const noexcept
    { return is_always_regular ; }

  constexpr bool is_contiguous() const noexcept
    { return is_always_contiguous ; }

  constexpr size_type stride( size_type i ) const noexcept
    { return mapping::template get_stride<0>(i); }

  template< typename iType >
  void stride( iType * const s ) const noexcept
    { mapping::template get_stride<0>(s); }

  // CTOR

  constexpr mapping() noexcept = default ;

  constexpr explicit mapping( extents_t const & D ) noexcept : extents_t(D) {}

  // OPERATOR

  template< typename ... Integral >
  constexpr typename std::enable_if
    < detail::pack_is_integral< Integral ... >::value &&
      extents_t::rank() == 0
    , typename extents_t::size_type
    >::type operator()
    ( Integral const & ... indices ) const noexcept
    { return 0 ; } 

  template< typename I0 , typename ... Integral >
  constexpr typename std::enable_if
    < detail::pack_is_integral< I0 , Integral ... >::value &&
      0 < extents_t::rank()
    , typename extents_t::size_type 
    >::type operator()
    ( I0 const & i0 , Integral const & ... indices ) const noexcept
    { return mapping::template offset< extents_t::rank() - 1 >(i0,indices...); }

}; // struct mapping

}; // struct layout_right

//----------------------------------------------------------------------------

struct layout_left {

template< typename ExtentType , size_t ... Extents >
struct mapping : private detail::extents_impl< 0 , ExtentType , Extents... >
{
public:

  // TYPES

  using size_type  = ExtentType ;
  using extents_t  = detail::extents_impl< 0 , ExtentType , Extents ... > ;

private:

  template< int I , typename iType >
  void get_stride( iType * const s ) const noexcept
    {
      if ( I < extents_t::rank() ) {
        s[I] = I ? s[I-1] * extents_t::template extent<I?I-1:I>() : 1 ;
        mapping::template get_stride<(I+1<extents_t::rank()?I+1:I)>(s);
      }
    }

  template< int I >
  constexpr size_type get_stride( int i ) const noexcept
    {
      return ( I < i ? extents_t::template extent<I>() *
                       mapping::template get_stride<(I+1<extents_t::rank()?I+1:I)>(i)
                     : 1 );
    }

  template< unsigned I >
  constexpr size_type offset() const noexcept
    { return 0 ; }

  template< unsigned I , typename IR , typename ... Arg >
  constexpr size_type
  offset( IR ir , Arg ... arg ) const noexcept
    {
      return ir + extents_t::template extent<I>() *
                  mapping::template offset<I+1>( arg... );
    }

public:

  // DOMAIN OBSERVERS

  using extents_t::rank ;
  using extents_t::rank_dynamic ;
  using extents_t::static_extent ;
  using extents_t::extent ;
  using extents_t::size ;

  // CODOMAIN OBSERVERS

  constexpr size_type span() const noexcept
    { return extents_t::size(); }

  // MAPPING OBSERVERS

  static constexpr bool is_always_unique = true ;
  static constexpr bool is_always_regular = true ;
  static constexpr bool is_always_contiguous = true ;

  constexpr bool is_unique() const noexcept
    { return is_always_unique ; }

  constexpr bool is_regular() const noexcept
    { return is_always_regular ; }

  constexpr bool is_contiguous() const noexcept
    { return is_always_contiguous ; }

  constexpr size_type stride( size_type i ) const noexcept
    { return mapping::template get_stride<0>(i); }

  template< typename iType >
  void stride( iType * const s ) const noexcept
    { mapping::template get_stride<0>(s); }

  // CTOR

  constexpr mapping() noexcept = default ;

  constexpr explicit mapping( extents_t const & D ) noexcept : extents_t(D) {}

  // OPERATOR

  template< typename ... Integral >
  constexpr typename std::enable_if
    < detail::pack_is_integral< Integral ... >::value
    , size_type
    >::type operator()
    ( Integral const & ... indices ) const noexcept
    { return mapping::template offset<0>(indices...); }

}; // mapping

};

//--------------------------------------------------------------------------

struct layout_stride {

template< typename ExtentType , size_t ... Extents >
struct mapping : private detail::extents_impl< 0 , ExtentType , Extents... >
{
public:

  // TYPES

  using size_type  = ExtentType ;
  using extents_t  = detail::extents_impl< 0 , ExtentType , Extents ... > ;

private:

  size_type  m_stride[ extents_t::rank() ];
  int        m_unique ;
  int        m_contig ;

  template< unsigned I >
  constexpr size_type offset() const noexcept
    { return 0 ; }

  template< unsigned I , typename IR , typename ... Arg >
  constexpr size_type
  offset( IR ir , Arg ... arg ) const noexcept
    {
      return ir * m_stride[I] + mapping::template offset<I+1>( arg... );
    }

public:

  // DOMAIN OBSERVERS

  using extents_t::rank ;
  using extents_t::rank_dynamic ;
  using extents_t::static_extent ;
  using extents_t::extent ;
  using extents_t::size ;

  // CODOMAIN OBSERVERS

  constexpr size_type span() const noexcept
    { return extents_t::size(); }

  // MAPPING OBSERVERS

  static constexpr bool is_always_unique = false ;
  static constexpr bool is_always_regular = true ;
  static constexpr bool is_always_contiguous = false ;

  // Only unique if { dimension , stride } pairs
  // do not overlap
  constexpr bool is_unique() const noexcept { return m_unique ; }

  constexpr bool is_regular() const noexcept
    { return is_always_regular ; }

  constexpr bool is_contiguous() const noexcept { return m_contig ; }

  constexpr size_type stride( int i ) const noexcept
    { return i < extents_t::rank() ? m_stride[i] : 0 ; }

  template< typename iType >
  void stride( iType * const s ) const noexcept
    {
      for ( int i = 0 ; i < extents_t::rank() ; ++i ) {
        s[i] = m_stride[i] ;
      }
    }

  // CTOR

  constexpr mapping() noexcept
    : extents_t()
    , m_stride{0}
    , m_unique{0}
    , m_contig{0}
    {}

  template< typename T , size_t ... N >
  explicit mapping( layout_left::template mapping<T,N...> const & M ) noexcept
    : extents_t( (extents_t const &) M )
    , m_stride{0}
    , m_unique{1}
    , m_contig{1}
    { M.stride( m_stride ); }

  template< typename T , size_t ... N >
  explicit mapping( layout_right::template mapping<T,N...> const & M ) noexcept
    : extents_t( (extents_t const &) M )
    , m_stride{0}
    , m_unique{1}
    , m_contig{1}
    { M.stride( m_stride ); }

  template< typename T , size_t ... N >
  explicit mapping( layout_stride::template mapping<T,N...> const & M ) noexcept
    : extents_t( (extents_t const &) M )
    , m_stride{0}
    , m_unique( M.is_unique() )
    , m_contig( M.is_contiguous() )
    { M.stride( m_stride ); }

  template < typename IntType >
  explicit mapping( IntType const * const E
                  , IntType const * const S ) noexcept
    : extents_t(E)
    , m_stride{0}
    , m_unique{0}
    , m_contig{0}
    {
      int index[ extents_t::rank() ];

      // Copy strides and fill permutation such that
      //
      // S[ index[i] ] <= S[ index[i+1] ]
      //
      for ( int i = 0 ; i < extents_t::rank() ; ++i ) {
        m_stride[i] = S[i] ;

        int j = i ;

        for ( ; j && S[i] < S[ index[j-1] ] ; --j ) { index[j] = index[j-1] ; }

        index[j] = i ;
      }

      m_unique = 1 ;
      m_contig = 1 ;
      for ( int i = 1 ; i < extents_t::rank() ; ++i ) {
        const int j = index[i-1];
        const int k = index[i];
        const size_type prev = S[j] * E[j] ;
        if ( S[k] != prev ) { m_contig = 0 ; }
        if ( S[k] <  prev ) { m_unique = 0 ; }
      }
    }

  // OPERATOR

  template< typename ... Integral >
  constexpr typename std::enable_if
    < detail::pack_is_integral< Integral ... >::value &&
      0 < extents_t::rank()
    , size_type
    >::type operator()
    ( Integral const & ... indices ) const noexcept
    { return mapping::template offset<0>(indices...); }
};

};

//--------------------------------------------------------------------------

}} // std::experimental

//--------------------------------------------------------------------------
//--------------------------------------------------------------------------

namespace std {
namespace experimental {

template< size_t ... Extents >
using extents = detail::extents_impl< 0 , size_t , Extents ... > ;

//--------------------------------------------------------------------------

template < typename DataType , typename ... Properties >
struct array_ref
{
private:

  template< typename , typename ... > friend struct array_ref ;

  using prop = detail::unpack_array_properties< DataType , Properties... > ;
  using bounds_check = typename prop::bounds_check ;

public:

  // TYPES

  using layout     = typename prop::layout ;
  using mapping    = typename prop::mapping ;
  using size_type  = typename prop::size_type ;
  using value_type = typename prop::value_type ;
  using reference  = value_type & ;
  using pointer    = value_type * ;

  // CONSTRUCTORS AND ASSIGNMENT OPERATORS

  constexpr array_ref() noexcept : m_ptr(0), m_map() {}
  constexpr array_ref(array_ref const& b) noexcept = default;
  constexpr array_ref(array_ref&& b) noexcept = default;
  array_ref& operator=(array_ref const& b) noexcept = default;
  array_ref& operator=(array_ref&& b) noexcept = default;

  template< typename D , typename ... P >
  constexpr array_ref( array_ref<D,P...> const & rhs ) noexcept
    : m_ptr( rhs.m_ptr )
    , m_map( rhs.m_map )
    {}

  template< typename D , typename ... P >
  array_ref & operator = ( array_ref<D,P...> const & rhs ) noexcept
    {
      m_ptr = rhs.m_ptr ;
      m_map = rhs.m_map ;
      return *this ;
    }

  template < typename... UnsignedIntegers >
  explicit constexpr array_ref
    ( typename std::enable_if
        < detail::pack_is_integral< UnsignedIntegers... >::value
        , pointer
        >::type p
    , UnsignedIntegers ... dynamic_dims
    ) noexcept
    : m_ptr(p), m_map( mapping(dynamic_dims...) ) {}

  explicit constexpr array_ref( pointer p, mapping const& m ) noexcept
    : m_ptr(p), m_map(m) {}

  // DOMAIN OBSERVERS

  static constexpr int rank() noexcept
    { return mapping::rank(); }

  static constexpr int rank_dynamic() noexcept
    { return mapping::rank_dynamic(); }

  constexpr size_type static_extent( int coord ) const noexcept
    { return m_map.static_extent( coord ); }

  constexpr size_type extent( int coord ) const noexcept
    { return m_map.extent( coord ); }

  constexpr size_type size() const noexcept
    { return m_map.size(); }

  // CODOMAIN OBSERVERS

  constexpr pointer data() const noexcept { return m_ptr ; }

  constexpr size_type span() const noexcept
    { return m_map.span(); }

  // MAPPING OBSERVERS

  static constexpr bool is_always_unique = mapping::is_always_unique ;
  static constexpr bool is_always_regular = mapping::is_always_regular ;
  static constexpr bool is_always_contiguous = mapping::is_always_contiguous ;

  constexpr bool is_unique() const noexcept  { return m_map.is_unique(); }
  constexpr bool is_regular() const noexcept { return m_map.is_regular(); }
  constexpr bool is_contiguous() const noexcept {return m_map.is_contiguous();}

  constexpr value_type stride( size_type i ) const noexcept
    { return m_map.stride(i); }

  // MEMBER ACCESS 

  template <typename... UnsignedIntegers>
  typename std::enable_if
    <( mapping::rank() <= sizeof...(UnsignedIntegers) &&
       detail::pack_is_integral<UnsignedIntegers...>::value )
    , reference
    >::type
  operator()(UnsignedIntegers... indices) const noexcept
    { return m_ptr[ m_map( indices... ) ]; }

  template < typename IntType >
  typename std::enable_if
    <( mapping::rank() == 1 && std::is_integral<IntType>::value )
    , reference
    >::type
  operator[]( IntType idx ) const noexcept
    { return m_ptr[ m_map( idx ) ]; }

private:
  pointer  m_ptr ;
  mapping  m_map ;
};

//--------------------------------------------------------------------------

template< typename DataType , typename ... Properties
        , typename ... SliceSpecs >
typename detail
  ::subarray_generator< array_ref< DataType , Properties ... > , SliceSpecs ... >
    ::type
subarray( array_ref< DataType , Properties... > const & a
        , SliceSpecs ... slice_specs
        )
{
  using ArrayRefType = array_ref< DataType , Properties ... > ;
  using generator = detail::subarray_generator< ArrayRefType , SliceSpecs ... > ;
  using layout = typename generator::type::layout ;

  static_assert( ArrayRefType::rank() == sizeof...(SliceSpecs) , "" );

  return generator::template apply< layout >( a , slice_specs ... );
}

}} // std::experimental

#endif // #ifndef STD_EXPERIMENTAL_ARRAY_REF_HEADER

